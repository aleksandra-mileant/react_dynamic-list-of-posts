{"version":3,"sources":["api/api.ts","api/posts.ts","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/users.ts","components/Loader/Loader.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getPosts","a","fetch","posts","json","getUserPosts","userId","userPosts","filter","post","getPostDetails","postId","res","PostsList","setPostId","selectedPostId","useState","setPosts","loadPosts","postsFromServer","useEffect","openPost","className","map","title","body","type","onClick","id","getComments","deleteComment","commentId","method","addComment","name","email","JSON","stringify","headers","NewCommentForm","loadComments","userName","setUserName","setEmail","setBody","handleChange","event","target","value","Error","handleSubmit","preventDefault","onSubmit","placeholder","onChange","PostDetails","setPost","comments","setComments","isCommentsVisible","setIsCommentsVisible","loadPost","postFromServer","commentsFromServer","removeComment","comment","getUsers","Loader","App","users","setUsers","setUserId","isPostLoading","setIsPostLoading","loadUsers","userFromServer","htmlFor","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8346088d.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\n\nexport async function getPosts(): Promise<Post[]> {\n  const posts = await fetch(`${BASE_URL}/posts/`);\n\n  return posts.json();\n}\n\nexport async function getUserPosts(userId: number) {\n  const userPosts = await getPosts();\n\n  if (userId === 0) {\n    return userPosts;\n  }\n\n  return userPosts.filter(post => post.userId === userId);\n}\n\nexport const getPostDetails = async (postId: number) => {\n  const res = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  return res.json();\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUserPosts } from '../../api/posts';\nimport './PostsList.scss';\n\ntype Props = {\n  userId: number,\n  selectedPostId: number,\n  setPostId: (postId: number) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  userId, setPostId, selectedPostId,\n}) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n\n  const loadPosts = async () => {\n    const postsFromServer = await getUserPosts(userId);\n\n    setPosts(postsFromServer);\n  };\n\n  useEffect(() => {\n    loadPosts();\n  }, [userId]);\n\n  const openPost = (postId: number) => {\n    setPostId(postId);\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n              {post.body}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={post.id !== selectedPostId\n                ? (() => openPost(post.id))\n                : (() => openPost(0))}\n            >\n              {selectedPostId === post.id ? 'Hide' : 'Show'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { BASE_URL } from './api';\n\nexport const getComments = async (postId: number): Promise<Comment[]> => {\n  const res = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n  return res.json();\n};\n\nexport const deleteComment = async (commentId: number) => {\n  return fetch(\n    `${BASE_URL}/comments/${commentId}`,\n    { method: 'DELETE' },\n  );\n};\n\nexport const addComment = async (\n  postId: number,\n  name: string,\n  email: string,\n  body: string,\n): Promise<Comment[]> => {\n  const res = await fetch(\n    `${BASE_URL}/comments`,\n    {\n      method: 'POST',\n      body: JSON.stringify({\n        postId,\n        name,\n        email,\n        body,\n      }),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n    },\n  );\n\n  return res.json();\n};\n","import React, { useState } from 'react';\nimport { addComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  postId: number,\n  loadComments: (postId: number) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, loadComments }) => {\n  const [userName, setUserName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const handleChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'userName':\n        setUserName(value);\n        break;\n      case 'email':\n        setEmail(value);\n        break;\n      case 'body':\n        setBody(value);\n        break;\n      default:\n        throw new Error(`Unknown input name: ${name}`);\n    }\n  };\n\n  const clearForm = () => {\n    setUserName('');\n    setEmail('');\n    setBody('');\n  };\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const newComment = await addComment(\n      postId,\n      userName,\n      email,\n      body,\n    );\n\n    if (newComment) {\n      loadComments(postId);\n    }\n\n    clearForm();\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"userName\"\n          value={userName}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={body}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={handleChange}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { deleteComment, getComments } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  postId: number,\n};\n\nexport const PostDetails: React.FC<Props> = ({ postId }) => {\n  const [post, setPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isCommentsVisible, setIsCommentsVisible] = useState(false);\n\n  const loadPost = async () => {\n    const postFromServer = await getPostDetails(postId);\n\n    setPost(postFromServer);\n  };\n\n  const loadComments = async () => {\n    const commentsFromServer = await getComments(postId);\n\n    setComments(commentsFromServer);\n  };\n\n  useEffect(() => {\n    loadPost();\n    loadComments();\n  }, [postId]);\n\n  const removeComment = async (commentId: number) => {\n    await deleteComment(commentId);\n    loadComments();\n  };\n\n  const changeCommentsVisibility = () => {\n    setIsCommentsVisible(!isCommentsVisible);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>\n        Post details:\n      </h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post?.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={changeCommentsVisibility}\n        >\n          {isCommentsVisible ? 'Close Comments' : 'Open comments'}\n        </button>\n\n        {isCommentsVisible && (\n          <ul className=\"PostDetails__list\">\n            {comments.map(comment => (\n              <li\n                className=\"PostDetails__list-item\"\n                key={comment.id}\n              >\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => removeComment(comment.id)}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={postId}\n            loadComments={loadComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import { BASE_URL } from './api';\n\nexport const getUsers = async (): Promise<User[]> => {\n  const res = await fetch(`${BASE_URL}/users`);\n\n  return res.json();\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { ChangeEvent, useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/users';\nimport { Loader } from './components/Loader';\n\nconst App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [userId, setUserId] = useState(0);\n  const [postId, setPostId] = useState(0);\n  const [isPostLoading, setIsPostLoading] = useState(false);\n\n  const loadUsers = async () => {\n    setIsPostLoading(true);\n    const userFromServer = await getUsers();\n\n    setUsers(userFromServer);\n    setIsPostLoading(false);\n  };\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  const clearPost = () => {\n    setPostId(0);\n  };\n\n  const handleChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    clearPost();\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"userSelect\">\n          Select a user: &nbsp;\n\n          <select\n            id=\"userSelect\"\n            className=\"App__user-selector\"\n            onChange={handleChange}\n            value={userId}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {isPostLoading\n            ? <Loader />\n            : (\n              <PostsList\n                userId={userId}\n                selectedPostId={postId}\n                setPostId={setPostId}\n              />\n            )}\n        </div>\n        <div className=\"App__content\">\n          {postId !== 0\n            ? (\n              <PostDetails\n                postId={postId}\n              />\n            )\n            : <div className=\"PostsList__item\">Choose a User</div>}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}